<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Track Finder</title>
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.2/css/all.css" />
    <!-- Google Fonts -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins&display=swap" rel="stylesheet">
    <!-- Bootstrap core CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.4.1/css/bootstrap.min.css"
        rel="stylesheet" />
    <!-- Material Design Bootstrap -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/mdbootstrap/4.15.0/css/mdb.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="../css/style.css">
</head>

<body>
    <div class="container-fluid">
        <div class="row">
            <div class="col">
                <!-- Recommendations header -->
                <div class="text-center mt-5 animated fadeInLeft">
                    <h1>
                        Recommendations
                    </h1>
                    <h4>
                        <span id="perfect_counter">
                            <span id="perfect_qty">0</span> Perfect -
                        </span>
                        <span id="good_counter">
                            <span id="good_qty">0 </span> Good -
                        </span>
                        <span id="acceptable_counter">
                            <span id="acceptable_qty">0</span> Acceptable
                        </span>
                    </h4>
                    <h2>Create Playlist</h2>
                    <a href="" class="btn btn-outline-mdb-color font-weight-bold" id="create_playlist_button">Only Perfect</a>
                    <a href="" class="btn btn-outline-mdb-color font-weight-bold" id="create_playlist_button">Perfect & Good</a>
                    <a href="" class="btn btn-outline-mdb-color font-weight-bold" id="create_playlist_button">All Tracks</a>
                </div>
            </div>
        </div>
        <div class="row">
            <!-- Recommendations Cards -->
            <% for(var i = 0; i < recommendations.tracks.length; i++){ %>
            <div class="col-md-6 col-xl-4 mx-auto">
                <div class="card bg-dark my-3 mx-auto text-center text-white animated fadeInUpBig"
                    id="track_card<%= i %>">
                    <div class="card-header">
                        <h4><a href="" class="text-white"><%= recommendations.tracks[i].name %></a></h4>
                        <div style="display: none;" class="recommendation_uri"><%= recommendations.tracks[i].uri %>
                        </div>
                        <p><%= recommendations.tracks[i].album.name %></p>
                        <p>
                            <i class="fas fa-fire text-danger"></i>
                            <span class="track_popularity"><%= recommendations.tracks[i].popularity %></span>
                        </p>

                        <div id="acousticness<%= i %>" style="display: none;">
                            <%= features.audio_features[i].acousticness %></div>
                        <div id="danceability<%= i %>" style="display: none;">
                            <%= features.audio_features[i].danceability %></div>
                        <div id="energy<%= i %>" style="display: none;"><%= features.audio_features[i].energy %></div>
                        <div id="instrumentalness<%= i %>" style="display: none;">
                            <%= features.audio_features[i].instrumentalness %></div>
                        <div id="liveness<%= i %>" style="display: none;"><%= features.audio_features[i].liveness %>
                        </div>
                        <div id="loudness<%= i %>" style="display: none;"><%= features.audio_features[i].loudness %>
                        </div>
                        <div id="speechiness<%= i %>" style="display: none;">
                            <%= features.audio_features[i].speechiness %></div>
                        <div id="valence<%= i %>" style="display: none;"><%= features.audio_features[i].valence %></div>
                        <div id="tempo<%= i %>" style="display: none;"><%= features.audio_features[i].tempo %></div>

                        <p class="card-feature-icons"></p>

                        <% recommendations.tracks[i].artists.forEach(function(artist){ %>
                        <a href="/artist/<%= artist.id %>"
                            class="btn btn-sm btn-outline-white font-weight-bold my-1 mx-1"><%= artist.name %>
                        </a>
                        <% }) %>

                    </div>
                    <div class="card-body">
                        <div class="container">
                            <div class="row">
                                <div class="col">
                                    <% if(recommendations.tracks[i].preview_url != null){ %>
                                    <iframe
                                        src="https://open.spotify.com/embed/track/<%= recommendations.tracks[i].id %> "
                                        width="300" height="80" frameborder="1" allowtransparency="true"
                                        allow="encrypted-media"></iframe>
                                    <% } %>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col">
                                    <a href="/save/<%= recommendations.tracks[i].id %>"
                                        class="btn btn-sm btn-outline-white font-weight-bold"><i
                                            class="fas fa-heart"></i> Add to "Liked Songs"</a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <% } %>
        </div>
        <div class="row">
            <div class="col">
                <%- include ("partials/footer") %>
            </div>
        </div>
    </div>
    <script>
        // Set multiple attributes at once on hmtl element
        function setAttributes(element, attributes) {
            for (var key in attributes) {
                element.setAttribute(key, attributes[key]);
            }
        }

        window.onload = function addSelectedAudioFeatures() {

            let params = '<%= featuresParams %>';
            let tracks = document.getElementsByClassName("card");
            let recommendationCards = document.getElementsByClassName("card-feature-icons");
            let featuresString = '<%= featuresList %>';
            let featuresOptions = ["Acousticness", "Danceability", "Energy", "Instrumentalness",
                "Liveness", "Loudness", "Speechiness", "Valence", "Tempo"];
            let data, feature;

            function checkMaxValues(feature, data, container) {
                if (params.includes(feature)) {
                    let max_value, difference;
                    let perfect = true,
                        good = true;
                
                    if (feature != "max_Tempo") {
                        max_value = parseFloat(params.split(feature + "=").pop());

                        if (data < max_value) {
                            container.style.color = "rgb(46, 184, 46)";
                        } else if ((data - max_value) <= 0.1) {
                            container.style.color = "yellow";
                            perfect = false;
                        } else {
                            container.style.color = "rgb(255, 51, 51)";
                            perfect = false, good = false;
                        }
                    }
                    
                    

                    // else {
                    //     max_value = parseInt(params.split(feature + "=").pop());
                    //     difference = data - max_value;

                    //     if (difference <= 10) {
                    //         container.style.color = "rgb(46, 184, 46)";
                    //     }else if(difference > 10 && difference < 20){
                    //         container.style.color = "yellow";
                    //     } else {
                    //         container.style.color = "rgb(46, 184, 46)";
                    //     }
                    // }
                }
            }

            for (var j = 0; j < recommendationCards.length; j++) {
                for (var i = 0; i < featuresOptions.length; i++) {

                    if (featuresString.includes(featuresOptions[i])) {

                        let container = document.createElement("span");
                        recommendationCards[j].appendChild(container);

                        switch (featuresOptions[i]) {
                            case "Acousticness":
                                feature = "max_Acousticness";
                                data = parseFloat(document.getElementById("acousticness" + j).textContent).toPrecision(3);
                                container.innerHTML = '<i class="fas fa-guitar"></i> ' + data;
                                setAttributes(container, { "class": "mx-2", "data-toggle": "tooltip", "data-placement": "right", "title": "Acousticness. 1.0 represents high confidence track is acoustic.", "style": "cursor: help" })
                                checkMaxValues(feature, data, container);
                                break;

                            case "Danceability":
                                feature = "max_Danceability";
                                data = parseFloat(document.getElementById("danceability" + j).textContent).toPrecision(3);
                                container.innerHTML = '<i class="fas fa-child"></i> ' + data;
                                setAttributes(container, { "class": "mx-2", "data-toggle": "tooltip", "data-placement": "right", "title": "Danceability. A value of 0.0 is least danceable and 1.0 is most danceable.", "style": "cursor: help" })
                                checkMaxValues(feature, data, container);
                                break;

                            case "Energy":
                                feature = "max_Energy";
                                data = parseFloat(document.getElementById("energy" + j).textContent).toPrecision(3);
                                container.innerHTML = '<i class="fas fa-battery-three-quarters"></i> ' + data;
                                setAttributes(container, { "class": "mx-2", "data-toggle": "tooltip", "data-placement": "right", "title": "Energy. Measure from 0.0 to 1.0, reprensents intensity and energy.", "style": "cursor: help" })
                                checkMaxValues(feature, data, container);
                                break;

                            case "Instrumentalness":
                                feature = "max_Instrumentalness";
                                data = parseFloat(document.getElementById("instrumentalness" + j).textContent).toPrecision(3);
                                container.innerHTML = '<i class="far fa-surprise"></i> ' + data;
                                setAttributes(container, { "class": "mx-2", "data-toggle": "tooltip", "data-placement": "right", "title": "Instrumentalness. Closer value to 1.0, greater likelyhood the track contains no vocals.", "style": "cursor: help" })
                                checkMaxValues(feature, data, container);
                                break;

                            case "Liveness":
                                feature = "max_Liveness";
                                data = parseFloat(document.getElementById("liveness" + j).textContent).toPrecision(3);
                                container.innerHTML = '<i class="fas fa-tv"></i> ' + data;
                                setAttributes(container, { "class": "mx-2", "data-toggle": "tooltip", "data-placement": "right", "title": "Liveness. A value of 0.8 provides a string likelyhood that the track is live.", "style": "cursor: help" })
                                checkMaxValues(feature, data, container);
                                break;

                            case "Loudness":
                                feature = "max_Loudness";
                                data = parseFloat(document.getElementById("loudness" + j).textContent).toPrecision(3);
                                container.innerHTML = '<i class="fas fa-volume-up"></i> ' + data;
                                setAttributes(container, { "class": "mx-2", "data-toggle": "tooltip", "data-placement": "right", "title": "Loudness. Overall loudness of the track in decibels(dB).", "style": "cursor: help" })
                                checkMaxValues(feature, data, container);
                                break;

                            case "Speechiness":
                                feature = "max_Speechiness";
                                data = parseFloat(document.getElementById("speechiness" + j).textContent).toPrecision(3);
                                container.innerHTML = '<i class="far fa-comment-dots"></i> ' + data;
                                setAttributes(container, { "class": "mx-2", "data-toggle": "tooltip", "data-placement": "right", "title": "Speechiness. Values below 0.33 most likely represent music and other non-speech-like tracks.", "style": "cursor: help" })
                                checkMaxValues(feature, data, container);
                                break;

                            case "Valence":
                                feature = "max_Valence";
                                data = parseFloat(document.getElementById("valence" + j).textContent).toPrecision(3);
                                container.innerHTML = '<i class="far fa-smile-beam"></i> ' + data;
                                setAttributes(container, { "class": "mx-2", "data-toggle": "tooltip", "data-placement": "right", "title": "Valence. Measure from 0.0 to 1.0 describing the musical positiveness conveyed by the track.", "style": "cursor: help" })
                                checkMaxValues(feature, data, container);
                                break;

                            case "Tempo":
                                feature = "max_Tempo";
                                data = parseFloat(document.getElementById("tempo" + j).textContent).toPrecision(3);
                                container.innerHTML = '<i class="fas fa-drum"></i> ' + data;
                                setAttributes(container, { "class": "mx-2", "data-toggle": "tooltip", "data-placement": "right", "title": "Tempo. Overall estimated tempo in beats per minute(BPM).", "style": "cursor: help" })
                                checkMaxValues(feature, data, container);
                                break;
                        }
                    }
                }
            }
        }

        // For Bootstrap tooltip
        $(document).ready(function () {
            $("body").tooltip({ selector: '[data-toggle=tooltip]' });
        });
    </script>
</body>

</html>