<%- include ("partials/header") %>
    <div class="container-fluid h-100">
        <div class="row h-50">
            <div class="col-6">
                <img src="/imgs/ud_music2.svg" alt="" class="img-fluid">
            </div>
            <div class="col-6">
                <button class="btn btn-default">See Details or whatever</button>
            </div>
        </div>
        <div class="row h-50">
            <div class="col-6">
                <button class="btn btn-default">Don't care</button>
            </div>
            <div class="col-6">
                <img src="/imgs/ud_question.svg" alt="" class="img-fluid">
            </div>
        </div>
    </div>
    <div class="container-fluid">
        <div class="row">
            <div class="col mx-auto">
                <div class="container-fluid">
                    <div class="row">
                        <div class="col-xl-8 mx-auto">
                            <div class="card bg-dark text-white text-center my-3">
                                <div class="card-header">
                                    <h4 class="card-title">Acousticness</h4>
                                </div>
                                <div class="card-body graph-card" style="padding: 0;">
                                    <canvas id="acousticness_linechart"></canvas>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xl-8 mx-auto">
                            <div class="card bg-dark text-white text-center my-3">
                                <div class="card-header" id="checkbox_instructions">
                                    <h2>What do you want the results to be based on?</h2>
                                    <i data-toggle="tooltip" data-placement="top"
                                        title="For bext results, choose 3-5 features that you think impact your taste the most."
                                        class="far fa-question-circle tooltip-custom"></i>
                                </div>
                                <div class="card-body">
                                    <div class="btn-group btn-group-toggle flex-wrap" data-toggle="buttons">
                                        <label class="btn btn-elegant active">
                                            <input type="checkbox" autocomplete="off" id="Acousticness"> Acousticness
                                        </label>
                                        <label class="btn btn-elegant active">
                                            <input type="checkbox" autocomplete="off" id="Danceability"> Danceability
                                        </label>
                                        <label class="btn btn-elegant active">
                                            <input type="checkbox" autocomplete="off" id="Energy"> Energy
                                        </label>
                                        <label class="btn btn-elegant active">
                                            <input type="checkbox" autocomplete="off" id="Instrumentalness">
                                            Instrumentalness
                                        </label>
                                        <label class="btn btn-elegant active">
                                            <input type="checkbox" autocomplete="off" id="Valence"> Valence
                                        </label>
                                        <label class="btn btn-elegant active">
                                            <input type="checkbox" autocomplete="off" id="Tempo"> Tempo
                                        </label>
                                    </div>
                                    <div id="slider_container"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col text-center my-5">
                            <a class="btn btn-secondary font-weight-bold" id="back_btn">Back</a>
                            <a href="#checkbox_instructions" class="btn btn-secondary font-weight-bold"
                                id="next_btn_features">Next</a>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <%- include ("partials/footer") %>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    </div>
    <script>
        // Set multiple attributes at once on hmtl element
        function setAttributes(element, attributes) {
            for (var key in attributes) {
                element.setAttribute(key, attributes[key]);
            }
        }

        // Audio features Line Chart
        var ctxL_audio = document.getElementById("acousticness_linechart").getContext("2d");
        var myLineChart = new Chart(ctxL_audio, {
            type: "line",
            data: {
                labels: [
                    "Acousticness",
                    "Danceability",
                    "Energy",
                    "Instrumentalness",
                    "Liveness",
                    "Speechiness",
                    "Valence",
                ],
                datasets: [
                    {
                        label: "Average",
                        data: [
                            avg_acousticness,
                            avg_danceability,
                            avg_energy,
                            avg_instrumentalness,
                            avg_liveness,
                            avg_speechiness,
                            avg_valence,
                        ],
                        borderColor: ["rgba(0, 0, 0)"],
                        backgroundColor: "rgba(255, 255, 255, 0)",
                        borderWidth: 3,
                    },
                ],
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    yAxes: [{
                        ticks: {
                            min: 0,
                            max: 1,
                            fontColor: "white"
                        }
                    }],
                    xAxes: [{
                        ticks: {
                            fontColor: "white",
                            autoSkip: false
                        }
                    }]
                },
                layout: {
                    padding: {
                        left: 0,
                        right: 0,
                        top: 0,
                        bottom: 0
                    }
                },
                legend: {
                    labels: {
                        fontColor: "white"
                    }
                }
            },
        });

        window.onload = function () {
            let trackItems = document.getElementsByClassName("trackItem");
            for (var i = 0; i < trackItems.length; i++) {
                let borderColors = ["rgb(106, 38, 111)", "rgb(66, 114, 19)", "rgb(124, 67, 19)", "rgb(38, 89, 106)", "rgb(124, 19, 19)"];
                // trackItems[i].style.backgroundColor = borderColors[i];

                let title = document.getElementById("title" + i).textContent,
                    a = document.getElementById("a" + i).textContent,
                    d = document.getElementById("d" + i).textContent,
                    e = document.getElementById("e" + i).textContent,
                    ins = document.getElementById("ins" + i).textContent,
                    li = document.getElementById("li" + i).textContent,
                    s = document.getElementById("s" + i).textContent,
                    v = document.getElementById("v" + i).textContent;
                myLineChart.data.datasets.push({
                    label: title,
                    borderColor: borderColors[i],
                    backgroundColor: "rgba(255, 255, 255, 0)",
                    borderWidth: 3,
                    data: [a, d, e, ins, li, s, v]
                });
                myLineChart.update();
            }
        }

        document.getElementById("back_btn").addEventListener("click", goBack);
        function goBack() {
            window.history.back();
        }

        // Sliders
        let checkBtns = document.getElementsByTagName("input");
        let sliderContainer = document.getElementById("slider_container");
        let featureData = new Object();

        function createSliders(e) {
            let id = e.target.id;
            let targetSlider, maxSlider, targetNumDisplay, maxNumDisplay, sliders;

            function makeSliders(value, id) {
                if (id === "Tempo") {
                    targetSlider = document.createElement("input");
                    setAttributes(targetSlider, {
                        "type": "range", "class": "custom-range", "min": "0", "max": "255",
                        "step": "1", "value": value, "id": id + "_target", "name": "target_" + id, "oninput": "updateSliderValue(this.value, this.name);"
                    });
                    maxSlider = document.createElement("input");
                    setAttributes(maxSlider, {
                        "type": "range", "class": "custom-range", "min": "0", "max": "255",
                        "step": "1", "value": value, "id": id + "_max", "name": "max_" + id, "oninput": "updateSliderValue(this.value, this.name);"
                    });

                } else if (id === "Loudness") {
                    targetSlider = document.createElement("input");
                    setAttributes(targetSlider, {
                        "type": "range", "class": "custom-range", "min": "-60", "max": "0",
                        "step": "1", "value": value, "id": id + "_target", "name": "target_" + id, "oninput": "updateSliderValue(this.value, this.name);"
                    });
                    maxSlider = document.createElement("input");
                    setAttributes(maxSlider, {
                        "type": "range", "class": "custom-range", "min": "-60", "max": "0",
                        "step": "1", "value": value, "id": id + "_max", "name": "max_" + id, "oninput": "updateSliderValue(this.value, this.name);"
                    });
                } else {
                    targetSlider = document.createElement("input");
                    setAttributes(targetSlider, {
                        "type": "range", "class": "custom-range", "min": "0", "max": "1",
                        "step": "0.01", "value": value, "id": id + "_target", "name": "target_" + id, "oninput": "updateSliderValue(this.value, this.name);"
                    });
                    maxSlider = document.createElement("input");
                    setAttributes(maxSlider, {
                        "type": "range", "class": "custom-range", "min": "0", "max": "1",
                        "step": "0.01", "value": value, "id": id + "_max", "name": "max_" + id, "oninput": "updateSliderValue(this.value, this.name);"
                    });
                }

                targetNumDisplay = document.createElement("p");
                setAttributes(targetNumDisplay, { "class": "feature-display", "id": "target_" + id });
                targetNumDisplay.textContent = value;

                maxNumDisplay = document.createElement("p");
                setAttributes(maxNumDisplay, { "class": "feature-display", "id": "max_" + id });
                maxNumDisplay.textContent = value;

                sliders = [targetNumDisplay, targetSlider, maxNumDisplay, maxSlider];
                return sliders;
            }

            if (e.target.type === "checkbox" && e.target.checked === true) {
                checkedBtnCount++;
                let container = document.createElement("div");
                setAttributes(container, { "class": "slider-group my-3 container-fluid", "id": id + "_container" });

                let row = document.createElement("div");
                setAttributes(row, { "class": "row" });
                colOne = document.createElement("div");
                setAttributes(colOne, { "class": "col-10 col-lg-4 mx-auto" });
                colTwo = document.createElement("div");
                setAttributes(colTwo, { "class": "col-10 col-lg-4 mx-auto" });

                switch (id) {
                    case "Acousticness":
                        sliders = makeSliders(avg_acousticness, id);
                        break;

                    case "Danceability":
                        sliders = makeSliders(avg_danceability, id);
                        break;

                    case "Energy":
                        sliders = makeSliders(avg_energy, id);
                        break;

                    case "Instrumentalness":
                        sliders = makeSliders(avg_instrumentalness, id);
                        break;

                    case "Liveness":
                        sliders = makeSliders(avg_liveness, id);
                        break;

                    case "Loudness":
                        sliders = makeSliders(avg_loudness, id);
                        break;

                    case "Speechiness":
                        sliders = makeSliders(avg_speechiness, id);
                        break;

                    case "Valence":
                        sliders = makeSliders(avg_valence, id);
                        break;

                    case "Tempo":
                        sliders = makeSliders(avg_tempo, id);
                        break;
                }

                let targetLabel = document.createElement("label"),
                    maxLabel = document.createElement("label");

                targetLabel.setAttribute("for", "target_" + id);
                maxLabel.setAttribute("for", "max_" + id);
                targetLabel.textContent = "Target " + id;
                maxLabel.textContent = "Max " + id;

                colOne.appendChild(targetLabel);
                colOne.appendChild(sliders[0]);
                colOne.appendChild(sliders[1]);
                row.appendChild(colOne);

                colTwo.appendChild(maxLabel);
                colTwo.appendChild(sliders[2]);
                colTwo.appendChild(sliders[3]);
                row.appendChild(colTwo);

                container.appendChild(row);

                sliderContainer.appendChild(container);
            } else {
                checkedBtnCount--;
                let removedDiv = document.getElementById(e.target.id + "_container");
                sliderContainer.removeChild(removedDiv);
            }
        };

        checkBtns.forEach(function (btn) {
            btn.addEventListener("click", createSliders);
        });

        function updateSliderValue(value, name) {
            document.getElementById(name).innerHTML = value;
        }

        // Send data to next page
        let nextBtn = document.getElementById("next_btn_features");
        let checkedBtnCount = 0;

        function sendData() {
            if (checkedBtnCount > 0) {
                let access_token = '<%= access_token %>';
                let trackIds = '<%= trackIds %>';
                let queryString = "limit=40&seed_tracks=";

                trackIds += "&";
                queryString += trackIds;

                // Audio Feature values
                let featureDisplays = document.getElementsByClassName("feature-display");
                let featureData = new Object();
                for (var i = 0; i < featureDisplays.length; i++) {
                    let key = featureDisplays[i].id;
                    let value = parseFloat(featureDisplays[i].textContent);
                    featureData[key] = value;
                }

                const entries = Object.entries(featureData);
                for (const [key, value] of entries) {
                    queryString = queryString + key + "=" + value + "&";
                }
                queryString = queryString.slice(0, -1);

                // Desired Audio features
                let featuresList = "",
                    checkBoxes = document.getElementsByTagName("input");

                for (var i = 0; i < checkBoxes.length; i++) {
                    if (checkBoxes[i].type === "checkbox" && checkBoxes[i].checked === true) {
                        featuresList = featuresList + checkBoxes[i].id + ", ";
                    }
                }
                featuresList = featuresList.slice(0, -2);

                let url = "/recommendations/" + access_token + "/" + queryString + "/" + featuresList + "/" + trackIds;
                nextBtn.href = url;
            } else {
                let instructions = document.getElementById("checkbox_instructions"),
                    alert = document.createElement("h6");
                alert.textContent = "Please select at least 1 audio feature.";
                alert.setAttribute("class", "text-danger");

                instructions.appendChild(alert);
            }

        }

        nextBtn.addEventListener("click", sendData);

        // For Bootstrap tooltip
        $(document).ready(function () {
            $("body").tooltip({ selector: '[data-toggle=tooltip]' });
        });
    </script>
</body>

</html>