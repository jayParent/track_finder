<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Track Finder</title>
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.2/css/all.css" />
    <!-- Google Fonts -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins&display=swap" rel="stylesheet">
    <!-- Bootstrap core CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.4.1/css/bootstrap.min.css"
        rel="stylesheet" />
    <!-- Material Design Bootstrap -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/mdbootstrap/4.15.0/css/mdb.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="../css/style.css">
</head>

<body>
    <div class="container-fluid">
        <div class="row">
            <div class="col">
                <a href="https://github.com/jayParent/track_finder" target="_blank"><i
                        class="fab fa-github text-dark mt-3 ml-1" aria-hidden="true" id="gh_logo"></i></a>
            </div>
        </div>
        <div class="row">
            <div class="col mx-auto">
                <div class="container-fluid">
                    <div class="row">
                        <div class="col-xl-8 mx-auto text-center">
                            <table class="table table-responsive-sm table-sm table-dark my-3">
                                <thead>
                                    <tr>
                                        <th>Track</th>
                                        <th>Acousticness</th>
                                        <th>Danceability</th>
                                        <th>Energy</th>
                                        <th>Instrumentalness</th>
                                        <th>Liveness</th>
                                        <th>Loudness</th>
                                        <th>Speechiness</th>
                                        <th>Valence</th>
                                        <th>Tempo</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% for(var i = 0; i < tracks.audio_features.length; i++){ %>
                                    <tr class="trackItem">
                                        <td id="title<%= i %>"><%= titles.tracks[i].name %></td>
                                        <td class="acousticness" id="a<%= i %>">
                                            <%= tracks.audio_features[i].acousticness %></td>
                                        <td class="danceability" id="d<%= i %>">
                                            <%= tracks.audio_features[i].danceability %></td>
                                        <td class="energy" id="e<%= i %>"><%= tracks.audio_features[i].energy %></td>
                                        <td class="instrumentalness" id="ins<%= i %>">
                                            <%= tracks.audio_features[i].instrumentalness %>
                                        </td>
                                        <td class="liveness" id="li<%= i %>"><%= tracks.audio_features[i].liveness %>
                                        </td>
                                        <td class="loudness"><%= tracks.audio_features[i].loudness %></td>
                                        <td class="speechiness" id="s<%= i %>">
                                            <%= tracks.audio_features[i].speechiness %></td>
                                        <td class="valence" id="v<%= i %>"><%= tracks.audio_features[i].valence %></td>
                                        <td class="tempo"><%= tracks.audio_features[i].tempo %></td>
                                    </tr>
                                    <% } %>
                                    <tr class="bg-dark">
                                        <td>Average</td>
                                        <td id="avg_acousticness"></td>
                                        <td id="avg_danceability"></td>
                                        <td id="avg_energy"></td>
                                        <td id="avg_instrumentalness"></td>
                                        <td id="avg_liveness"></td>
                                        <td id="avg_loudness"></td>
                                        <td id="avg_speechiness"></td>
                                        <td id="avg_valence"></td>
                                        <td id="avg_tempo"></td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xl-8 mx-auto">
                            <div class="card bg-dark text-white text-center my-3">
                                <div class="card-header">
                                    <h4 class="card-title">Audio Features</h4>
                                    <h6>Click on a track to hide it</h6>
                                </div>
                                <div class="card-body graph-card" style="padding: 0;">
                                    <canvas id="audio_features_linechart" style="min-height: 50vh;"></canvas>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xl-8 mx-auto text-center my-3">
                            <div class="card">
                                <div class="card-header">
                                    <h2>Why?</h2>
                                    <h6>What do you want the results to be based on?</h6>
                                </div>
                                <div class="card-body">
                                    <div class="btn-group btn-group-toggle flex-wrap" data-toggle="buttons">
                                        <label class="btn btn-info active">
                                            <input type="checkbox" autocomplete="off"> Acousticness
                                        </label>
                                        <label class="btn btn-info active">
                                            <input type="checkbox" autocomplete="off"> Danceability
                                        </label>
                                        <label class="btn btn-info active">
                                            <input type="checkbox" autocomplete="off"> Energy
                                        </label>
                                        <label class="btn btn-info active">
                                            <input type="checkbox" autocomplete="off"> Instrumentalness
                                        </label>
                                        <label class="btn btn-info active">
                                            <input type="checkbox" autocomplete="off"> Liveness
                                        </label>
                                        <label class="btn btn-info active">
                                            <input type="checkbox" autocomplete="off"> Loudness
                                        </label>
                                        <label class="btn btn-info active">
                                            <input type="checkbox" autocomplete="off"> Speechiness
                                        </label>
                                        <label class="btn btn-info active">
                                            <input type="checkbox" autocomplete="off"> Valence
                                        </label>
                                        <label class="btn btn-info active">
                                            <input type="checkbox" autocomplete="off" id="tempo"> Tempo
                                        </label>
                                    </div>
                                    <div id="slider_container">
                                        
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col text-center">
                            <a class="btn btn-outline-elegant font-weight-bold" id="back_btn">Back</a>
                            <a href="" class="btn btn-outline-elegant font-weight-bold" id="next_btn">Next</a>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <%- include ("partials/footer") %>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    </div>
    <script>
        // Calculate average audio features for picked tracks
        function calcAvgAudioFeatures() {
            let acousticnessObj = document.getElementsByClassName("acousticness"),
                danceabilityObj = document.getElementsByClassName("danceability"),
                energyObj = document.getElementsByClassName("energy"),
                instrumentalnessObj = document.getElementsByClassName("instrumentalness"),
                livenessObj = document.getElementsByClassName("liveness"),
                loudnessObj = document.getElementsByClassName("loudness"),
                speechinessObj = document.getElementsByClassName("speechiness"),
                valenceObj = document.getElementsByClassName("valence"),
                tempoObj = document.getElementsByClassName("tempo");

            let audioFeaturesAvg = { a: 0, d: 0, e: 0, ins: 0, li: 0, lo: 0, s: 0, v: 0, t: 0 }

            for (var i = 0; i < acousticnessObj.length; i++) {
                var value = parseFloat(acousticnessObj[i].textContent);
                audioFeaturesAvg.a += value;
                value = parseFloat(danceabilityObj[i].textContent);
                audioFeaturesAvg.d += value;
                value = parseFloat(energyObj[i].textContent);
                audioFeaturesAvg.e += value;
                value = parseFloat(instrumentalnessObj[i].textContent);
                audioFeaturesAvg.ins += value;
                value = parseFloat(livenessObj[i].textContent);
                audioFeaturesAvg.li += value;
                value = parseFloat(loudnessObj[i].textContent);
                audioFeaturesAvg.lo += value;
                value = parseFloat(speechinessObj[i].textContent);
                audioFeaturesAvg.s += value;
                value = parseFloat(valenceObj[i].textContent);
                audioFeaturesAvg.v += value;
                value = parseFloat(tempoObj[i].textContent);
                audioFeaturesAvg.t += value;
            }
            audioFeaturesAvg.a /= acousticnessObj.length;
            audioFeaturesAvg.d /= danceabilityObj.length;
            audioFeaturesAvg.e /= energyObj.length;
            audioFeaturesAvg.ins /= instrumentalnessObj.length;
            audioFeaturesAvg.li /= livenessObj.length;
            audioFeaturesAvg.lo /= loudnessObj.length;
            audioFeaturesAvg.s /= speechinessObj.length;
            audioFeaturesAvg.v /= valenceObj.length;
            audioFeaturesAvg.t /= tempoObj.length;

            return audioFeaturesAvg;
        };

        let audioFeaturesAvg = calcAvgAudioFeatures();
        document.getElementById("avg_acousticness").textContent = audioFeaturesAvg.a.toPrecision(3);
        document.getElementById("avg_danceability").textContent = audioFeaturesAvg.d.toPrecision(3);
        document.getElementById("avg_energy").textContent = audioFeaturesAvg.e.toPrecision(3);
        document.getElementById("avg_instrumentalness").textContent = audioFeaturesAvg.ins.toPrecision(3);
        document.getElementById("avg_liveness").textContent = audioFeaturesAvg.li.toPrecision(3);
        document.getElementById("avg_loudness").textContent = audioFeaturesAvg.lo.toPrecision(3);
        document.getElementById("avg_speechiness").textContent = audioFeaturesAvg.s.toPrecision(3);
        document.getElementById("avg_valence").textContent = audioFeaturesAvg.v.toPrecision(3);
        document.getElementById("avg_tempo").textContent = audioFeaturesAvg.t.toPrecision(3);

        let a = document.getElementById("avg_acousticness").textContent,
            d = document.getElementById("avg_danceability").textContent,
            e = document.getElementById("avg_energy").textContent,
            ins = document.getElementById("avg_instrumentalness").textContent,
            li = document.getElementById("avg_liveness").textContent,
            lo = document.getElementById("avg_loudness").textContent,
            s = document.getElementById("avg_speechiness").textContent,
            v = document.getElementById("avg_valence").textContent,
            t = document.getElementById("avg_tempo").textContent;

        // Audio features Line Chart
        var ctxL_audio = document.getElementById("audio_features_linechart").getContext("2d");
        var myLineChart = new Chart(ctxL_audio, {
            type: "line",
            data: {
                labels: [
                    "Acousticness",
                    "Danceability",
                    "Energy",
                    "Instrumentalness",
                    "Liveness",
                    "Speechiness",
                    "Valence",
                ],
                datasets: [
                    {
                        label: "Average",
                        data: [
                            a,
                            d,
                            e,
                            ins,
                            li,
                            s,
                            v,
                        ],
                        borderColor: ["rgba(0, 0, 0)"],
                        backgroundColor: "rgba(255, 255, 255, 0)",
                        borderWidth: 3,
                    },
                ],
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    yAxes: [{
                        ticks: {
                            min: 0,
                            max: 1,
                            fontColor: "white"
                        }
                    }],
                    xAxes: [{
                        ticks: {
                            fontColor: "white"
                        }
                    }]
                },
                layout: {
                    padding: {
                        left: 0,
                        right: 0,
                        top: 0,
                        bottom: 0
                    }
                },
                legend: {
                    labels: {
                        fontColor: "white"
                    }
                }
            },
        });

        window.onload = function () {
            let trackItems = document.getElementsByClassName("trackItem");
            for (var i = 0; i < trackItems.length; i++) {
                let borderColors = ["rgb(106, 38, 111)", "rgb(66, 114, 19)", "rgb(124, 67, 19)", "rgb(38, 89, 106)", "rgb(124, 19, 19)"];
                trackItems[i].style.backgroundColor = borderColors[i];

                let title = document.getElementById("title" + i).textContent,
                    a = document.getElementById("a" + i).textContent,
                    d = document.getElementById("d" + i).textContent,
                    e = document.getElementById("e" + i).textContent,
                    ins = document.getElementById("ins" + i).textContent,
                    li = document.getElementById("li" + i).textContent,
                    s = document.getElementById("s" + i).textContent,
                    v = document.getElementById("v" + i).textContent;
                myLineChart.data.datasets.push({
                    label: title,
                    borderColor: borderColors[i],
                    backgroundColor: "rgba(255, 255, 255, 0)",
                    borderWidth: 3,
                    data: [a, d, e, ins, li, s, v]
                });
                myLineChart.update();
            }
        }

    document.getElementById("back_btn").addEventListener("click", goBack);
    function goBack() {
        window.history.back();
    }

    // Sliders

    let checkBtns = document.getElementsByTagName("input");
    let sliderContainer = document.getElementById("slider_container");

    function setAttributes(element, attributes) {
        for (var key in attributes) {
            element.setAttribute(key, attributes[key]);
        }
    }

    function createSliders(e) {
        console.log(e.target.id);
        for (var i = 0; i < checkBtns.length; i++) {
            if (checkBtns[i].type === "checkbox" && checkBtns[i].checked === true) {
                let div = document.createElement("div");
                div.setAttribute("class", "slider-group");

                let slider = document.createElement("input");
                setAttributes(slider, {
                    "type": "range", "class": "custom-range", "min": "0", "max": "1",
                    "step": "0.01", "value": "0.5", "id": ""
                });

                let label = document.createElement("label");
                label.setAttribute("for", "");

                div.appendChild(slider);
                sliderContainer.appendChild(div);
            }
        }
    };

    checkBtns.forEach(function (btn) {
        btn.addEventListener("click", createSliders);
    });

    function updateSliderValue(value) {
        document.getElementById("inputValue").value = value;
        document.getElementById("sliderValue").value = value;
    }
    </script>

    <!-- <div class="slider-group">
        <input type="range" class="custom-range" min="0" max="1" step="0.01" value="0.5" name="" id="sliderValue"
        onchange="updateSliderValue(this.value);">
        <input type="number" name="" id="inputValue" onchange="updateSliderValue(this.value);">
    </div> -->
</body>

</html>