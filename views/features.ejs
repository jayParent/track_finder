<%- include ("partials/header") %>
    <div class="container-fluid">
        <div class="row mt-5" id="features_table_row"> 
            <div class="col">
                <div class="card bg-dark text-center my-3">
                    <table class="table table-responsive-sm table-sm text-white" id="features_table">
                        <thead>
                            <tr>
                                <th>Track</th>
                                <th data-toggle="tooltip" data-placement="top"
                                    title="1.0 represents high confidence track is acoustic."
                                    class="tooltip-custom">Acousticness <i
                                        class="far fa-question-circle"></i></th>
                                <th data-toggle="tooltip" data-placement="top"
                                    title="A value of 0.0 is least danceable and 1.0 is most danceable."
                                    class="tooltip-custom">Danceability <i
                                        class="far fa-question-circle"></i></th>
                                <th data-toggle="tooltip" data-placement="top"
                                    title="Measure from 0.0 to 1.0, reprensents intensity and energy."
                                    class="tooltip-custom">Energy <i class="far fa-question-circle"></i>
                                </th>
                                <th data-toggle="tooltip" data-placement="top"
                                    title="Closer value to 1.0, greater likelyhood the track contains no vocals."
                                    class="tooltip-custom">Instrumentalness <i
                                        class="far fa-question-circle"></i></th>
                                <th data-toggle="tooltip" data-placement="top"
                                    title="A value of 0.8 provides a string likelyhood that the track is live."
                                    class="tooltip-custom">Liveness <i class="far fa-question-circle"></i>
                                </th>
                                <th data-toggle="tooltip" data-placement="top"
                                    title="Overall loudness of the track in decibels(dB)."
                                    class="tooltip-custom">Loudness <i class="far fa-question-circle"></i>
                                </th>
                                <th data-toggle="tooltip" data-placement="top"
                                    title="Values below 0.33 most likely represent music and other non-speech-like tracks."
                                    class="tooltip-custom">Speechiness <i
                                        class="far fa-question-circle"></i></th>
                                <th data-toggle="tooltip" data-placement="top"
                                    title="Measure from 0.0 to 1.0 describing the musical positiveness conveyed by the track."
                                    class="tooltip-custom">Valence <i class="far fa-question-circle"></i>
                                </th>
                                <th data-toggle="tooltip" data-placement="top"
                                    title="Overall estimated tempo in beats per minute(BPM)."
                                    class="tooltip-custom">Tempo <i class="far fa-question-circle"></i></th>
                            </tr>
                        </thead>
                        <tbody>
                            <% for(var i = 0; i < tracks.audio_features.length; i++){ %>
                            <tr class="trackItem">
                                <td id="title<%= i %>"><%= titles.tracks[i].name %></td>
                                <td class="acousticness" id="a<%= i %>">
                                    <%= tracks.audio_features[i].acousticness %></td>
                                <td class="danceability" id="d<%= i %>">
                                    <%= tracks.audio_features[i].danceability %></td>
                                <td class="energy" id="e<%= i %>"><%= tracks.audio_features[i].energy %>
                                </td>
                                <td class="instrumentalness" id="ins<%= i %>">
                                    <%= tracks.audio_features[i].instrumentalness %>
                                </td>
                                <td class="liveness" id="li<%= i %>">
                                    <%= tracks.audio_features[i].liveness %>
                                </td>
                                <td class="loudness"><%= tracks.audio_features[i].loudness %></td>
                                <td class="speechiness" id="s<%= i %>">
                                    <%= tracks.audio_features[i].speechiness %></td>
                                <td class="valence" id="v<%= i %>"><%= tracks.audio_features[i].valence %>
                                </td>
                                <td class="tempo"><%= tracks.audio_features[i].tempo %></td>
                            </tr>
                            <% } %>
                            <tr class="bg-dark">
                                <td>Average</td>
                                <td id="avg_acousticness"></td>
                                <td id="avg_danceability"></td>
                                <td id="avg_energy"></td>
                                <td id="avg_instrumentalness"></td>
                                <td id="avg_liveness"></td>
                                <td id="avg_loudness"></td>
                                <td id="avg_speechiness"></td>
                                <td id="avg_valence"></td>
                                <td id="avg_tempo"></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="row mt-5 ml-lg-3">
            <div class="col-lg-6">
                <div class="jumbotron text-white bg-dark">
                    <h1 class="display-4">Your Results!</h1>
                    <p>When you have a better understanding of the features that make you love these <%= trackCount %> tracks, you may adjust the sliders to your liking, then get your recommendations.</p>
                    <a class="btn btn-secondary" role="button" id="features_see_details_btn">See Details</a>
                    <hr class="my-4">
                    <p>
                        <fieldset>
                            <legend>If you don't care about all this and just want a new playlist, click here!</legend>
                            <a class="btn btn-secondary" role="button" id="features_easy_mode_btn">Easy Mode</a>
                        </fieldset>
                    </p>
                  </div>
            </div>
        </div>
        <div class="row mt-5">
            <div class="col-lg-6 mx-auto text-center text-white">
                <h2 class="" id="see_details_view">Average value for your <%= trackCount %> picked tracks</h2>
            </div>
        </div>
        <div class="row my-5 mx-5">
            <div class="col-md-3 align-self-center mt-5">
                <img src="/imgs/ud_acousticness.svg" alt="" class="img-fluid">
            </div>
            <div class="col-md-3 text-white text-center align-self-center mt-3">
                <div class="card bg-dark">
                    <div class="card-body">
                        <canvas id="acousticness_pieChart"></canvas>
                        <h6 class="my-3 font">Acousticness</h6>
                        <p id="pie_chart_avg_acousticness" class="display-4 animated pulse slower infinite"></p>
                    </div>
                </div>   
            </div>
            <div class="col-md-3 align-self-center mt-5">
                <img src="/imgs/ud_dance.svg" alt="" class="img-fluid">
            </div>
            <div class="col-md-3 text-white text-center align-self-center mt-3">
                <div class="card bg-dark">
                    <div class="card-body">
                        <canvas id="danceability_pieChart"></canvas>
                        <h6 class="my-3">Danceability</h6>
                        <p id="pie_chart_avg_danceability" class="display-4 animated pulse slower infinite"></p>
                    </div>
                </div>  
            </div>
            <div class="col-md-3 align-self-center mt-5">
                <img src="/imgs/ud_energy.svg" alt="" class="img-fluid">
            </div>
            <div class="col-md-3 text-white text-center align-self-center mt-3">
                <div class="card bg-dark">
                    <div class="card-body">
                        <canvas id="energy_pieChart"></canvas>
                        <h6 class="my-3">Energy</h6>
                        <p id="pie_chart_avg_energy" class="display-4 animated pulse slower infinite"></p>
                    </div>
                </div>     
            </div>
            <div class="col-md-3 align-self-center mt-5">
                <img src="/imgs/ud_instrumentalness.svg" alt="" class="img-fluid">
            </div>
            <div class="col-md-3 text-white text-center align-self-center mt-3">
                <div class="card bg-dark">
                    <div class="card-body">
                        <canvas id="instrumentalness_pieChart"></canvas>
                        <h6 class="my-3">Instrumentalness</h6>
                        <p id="pie_chart_avg_instrumentalness" class="display-4 animated pulse slower infinite"></p>
                    </div>
                </div>     
            </div>
            <div class="col-md-3 align-self-center mt-5">
                <img src="/imgs/ud_valence.svg" alt="" class="img-fluid">
            </div>
            <div class="col-md-3 text-white text-center align-self-center mt-3">
                <div class="card bg-dark">
                    <div class="card-body">
                        <canvas id="valence_pieChart"></canvas>
                        <h6 class="my-3">Valence (Happiness)</h6>
                        <p id="pie_chart_avg_valence" class="display-4 animated pulse slower infinite"></p>
                    </div>
                </div>          
            </div>
            <div class="col-md-3 align-self-center mt-5">
                <img src="/imgs/ud_tempo.svg" alt="" class="img-fluid">
            </div>
            <div class="col-md-3 text-white text-center align-self-center mt-3">
                <div class="card bg-dark">
                    <div class="card-body">
                        <canvas id="tempo_pieChart"></canvas>
                        <h6 class="my-3">Tempo</h6>
                        <p id="pie_chart_avg_tempo" class="display-4 animated pulse slower infinite"></p>
                    </div>
                </div>  
            </div>
        </div>
        <div class="row">
            <div class="col-lg-10 mx-auto noPaddingCard">
                <div class="card bg-dark text-white text-center my-3">
                    <div class="card-header">
                        <h4 class="card-title">Audio Features</h4>
                        <h6>Click on a track to hide it</h6>
                    </div>
                    <div class="card-body graph-card" style="padding: 0;">
                        <canvas id="audio_features_linechart" style="min-height: 50vh;"></canvas>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6 mx-auto noPaddingCard">
                <div class="card bg-dark text-white text-center my-3">
                    <div class="card-header" id="checkbox_instructions">
                        <h2>What do you want the results to be based on?</h2>
                        <!-- <i data-toggle="tooltip" data-placement="top"
                            title="For bext results, choose 3-5 features that you think impact your taste the most."
                            class="far fa-question-circle tooltip-custom"></i> -->
                    </div>
                    <div class="card-body">
                        <div class="btn-group btn-group-toggle flex-wrap" data-toggle="buttons">
                            <label class="btn btn-elegant active">
                                <input type="checkbox" autocomplete="off" id="Acousticness"> Acousticness
                            </label>
                            <label class="btn btn-elegant active">
                                <input type="checkbox" autocomplete="off" id="Danceability"> Danceability
                            </label>
                            <label class="btn btn-elegant active">
                                <input type="checkbox" autocomplete="off" id="Energy"> Energy
                            </label>
                            <label class="btn btn-elegant active">
                                <input type="checkbox" autocomplete="off" id="Instrumentalness">
                                Instrumentalness
                            </label>
                            <label class="btn btn-elegant active">
                                <input type="checkbox" autocomplete="off" id="Valence"> Valence
                            </label>
                            <label class="btn btn-elegant active">
                                <input type="checkbox" autocomplete="off" id="Tempo"> Tempo
                            </label>
                        </div>
                        <div id="slider_container"></div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col text-center my-5">
                <a class="btn btn-secondary font-weight-bold" id="back_btn">Back</a>
                <a href="#checkbox_instructions" class="btn btn-secondary font-weight-bold"
                    id="next_btn_features">Next</a>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <%- include ("partials/footer") %>
            </div>
        </div>
    </div>
    </div>
    <script>
        // Set multiple attributes at once on hmtl element
        function setAttributes(element, attributes) {
            for (var key in attributes) {
                element.setAttribute(key, attributes[key]);
            }
        }

        // Calculate average audio features for picked tracks
        function calcAvgAudioFeatures() {
            let acousticnessObj = document.getElementsByClassName("acousticness"),
                danceabilityObj = document.getElementsByClassName("danceability"),
                energyObj = document.getElementsByClassName("energy"),
                instrumentalnessObj = document.getElementsByClassName("instrumentalness"),
                valenceObj = document.getElementsByClassName("valence"),
                tempoObj = document.getElementsByClassName("tempo");

            let audioFeaturesAvg = { a: 0, d: 0, e: 0, ins: 0, v: 0, t: 0 };

            for (var i = 0; i < acousticnessObj.length; i++) {
                var value = parseFloat(acousticnessObj[i].textContent);
                audioFeaturesAvg.a += value;
                value = parseFloat(danceabilityObj[i].textContent);
                audioFeaturesAvg.d += value;
                value = parseFloat(energyObj[i].textContent);
                audioFeaturesAvg.e += value;
                value = parseFloat(instrumentalnessObj[i].textContent);
                audioFeaturesAvg.ins += value;
                value = parseFloat(valenceObj[i].textContent);
                audioFeaturesAvg.v += value;
                value = parseFloat(tempoObj[i].textContent);
                audioFeaturesAvg.t += value;
            }
            audioFeaturesAvg.a /= acousticnessObj.length;
            audioFeaturesAvg.d /= danceabilityObj.length;
            audioFeaturesAvg.e /= energyObj.length;
            audioFeaturesAvg.ins /= instrumentalnessObj.length;
            audioFeaturesAvg.v /= valenceObj.length;
            audioFeaturesAvg.t /= tempoObj.length;

            return audioFeaturesAvg;
        };

        let audioFeaturesAvg = calcAvgAudioFeatures();
        document.getElementById("avg_acousticness").textContent = audioFeaturesAvg.a.toPrecision(3);
        document.getElementById("avg_danceability").textContent = audioFeaturesAvg.d.toPrecision(3);
        document.getElementById("avg_energy").textContent = audioFeaturesAvg.e.toPrecision(3);
        document.getElementById("avg_instrumentalness").textContent = audioFeaturesAvg.ins.toPrecision(3);
        document.getElementById("avg_valence").textContent = audioFeaturesAvg.v.toPrecision(3);
        document.getElementById("avg_tempo").textContent = audioFeaturesAvg.t.toPrecision(3);

        let avg_acousticness = parseFloat(document.getElementById("avg_acousticness").textContent),
            avg_danceability = parseFloat(document.getElementById("avg_danceability").textContent),
            avg_energy = parseFloat(document.getElementById("avg_energy").textContent),
            avg_instrumentalness = parseFloat(document.getElementById("avg_instrumentalness").textContent),
            avg_valence = parseFloat(document.getElementById("avg_valence").textContent),
            avg_tempo = parseFloat(document.getElementById("avg_tempo").textContent);

        window.onload = function () {
            let trackItems = document.getElementsByClassName("trackItem");
            for (var i = 0; i < trackItems.length; i++) {
                let borderColors = ["rgb(106, 38, 111)", "rgb(66, 114, 19)", "rgb(124, 67, 19)", "rgb(38, 89, 106)", "rgb(124, 19, 19)"];

                let title = document.getElementById("title" + i).textContent,
                    a = document.getElementById("a" + i).textContent,
                    d = document.getElementById("d" + i).textContent,
                    e = document.getElementById("e" + i).textContent,
                    ins = document.getElementById("ins" + i).textContent,
                    v = document.getElementById("v" + i).textContent;
                myLineChart.data.datasets.push({
                    label: title,
                    borderColor: borderColors[i],
                    backgroundColor: "rgba(255, 255, 255, 0)",
                    borderWidth: 3,
                    data: [a, d, e, ins, v]
                });
                myLineChart.update();
            }
        }

        document.getElementById("back_btn").addEventListener("click", goBack);
        function goBack() {
            window.history.back();
        }

        // Sliders
        let checkBtns = document.getElementsByTagName("input");
        let sliderContainer = document.getElementById("slider_container");
        let featureData = new Object();

        function createSliders(e) {
            let id = e.target.id;
            let targetSlider, maxSlider, targetNumDisplay, maxNumDisplay, sliders;

            function makeSliders(value, id) {
                if (id === "Tempo") {
                    targetSlider = document.createElement("input");
                    setAttributes(targetSlider, {
                        "type": "range", "class": "custom-range", "min": "0", "max": "255",
                        "step": "1", "value": value, "id": id + "_target", "name": "target_" + id, "oninput": "updateSliderValue(this.value, this.name);"
                    });
                    maxSlider = document.createElement("input");
                    setAttributes(maxSlider, {
                        "type": "range", "class": "custom-range", "min": "0", "max": "255",
                        "step": "1", "value": value, "id": id + "_max", "name": "max_" + id, "oninput": "updateSliderValue(this.value, this.name);"
                    });

                } else if (id === "Loudness") {
                    targetSlider = document.createElement("input");
                    setAttributes(targetSlider, {
                        "type": "range", "class": "custom-range", "min": "-60", "max": "0",
                        "step": "1", "value": value, "id": id + "_target", "name": "target_" + id, "oninput": "updateSliderValue(this.value, this.name);"
                    });
                    maxSlider = document.createElement("input");
                    setAttributes(maxSlider, {
                        "type": "range", "class": "custom-range", "min": "-60", "max": "0",
                        "step": "1", "value": value, "id": id + "_max", "name": "max_" + id, "oninput": "updateSliderValue(this.value, this.name);"
                    });
                } else {
                    targetSlider = document.createElement("input");
                    setAttributes(targetSlider, {
                        "type": "range", "class": "custom-range", "min": "0", "max": "1",
                        "step": "0.01", "value": value, "id": id + "_target", "name": "target_" + id, "oninput": "updateSliderValue(this.value, this.name);"
                    });
                    maxSlider = document.createElement("input");
                    setAttributes(maxSlider, {
                        "type": "range", "class": "custom-range", "min": "0", "max": "1",
                        "step": "0.01", "value": value, "id": id + "_max", "name": "max_" + id, "oninput": "updateSliderValue(this.value, this.name);"
                    });
                }

                targetNumDisplay = document.createElement("p");
                setAttributes(targetNumDisplay, { "class": "feature-display", "id": "target_" + id });
                targetNumDisplay.textContent = value;

                maxNumDisplay = document.createElement("p");
                setAttributes(maxNumDisplay, { "class": "feature-display", "id": "max_" + id });
                maxNumDisplay.textContent = value;

                sliders = [targetNumDisplay, targetSlider, maxNumDisplay, maxSlider];
                return sliders;
            }

            if (e.target.type === "checkbox" && e.target.checked === true) {
                checkedBtnCount++;
                let container = document.createElement("div");
                setAttributes(container, { "class": "slider-group my-3 container-fluid", "id": id + "_container" });

                let row = document.createElement("div");
                setAttributes(row, { "class": "row" });
                colOne = document.createElement("div");
                setAttributes(colOne, { "class": "col-10 col-lg-4 mx-auto" });
                colTwo = document.createElement("div");
                setAttributes(colTwo, { "class": "col-10 col-lg-4 mx-auto" });

                switch (id) {
                    case "Acousticness":
                        sliders = makeSliders(avg_acousticness, id);
                        break;

                    case "Danceability":
                        sliders = makeSliders(avg_danceability, id);
                        break;

                    case "Energy":
                        sliders = makeSliders(avg_energy, id);
                        break;

                    case "Instrumentalness":
                        sliders = makeSliders(avg_instrumentalness, id);
                        break;

                    case "Liveness":
                        sliders = makeSliders(avg_liveness, id);
                        break;

                    case "Loudness":
                        sliders = makeSliders(avg_loudness, id);
                        break;

                    case "Speechiness":
                        sliders = makeSliders(avg_speechiness, id);
                        break;

                    case "Valence":
                        sliders = makeSliders(avg_valence, id);
                        break;

                    case "Tempo":
                        sliders = makeSliders(avg_tempo, id);
                        break;
                }

                let targetLabel = document.createElement("label"),
                    maxLabel = document.createElement("label");

                targetLabel.setAttribute("for", "target_" + id);
                maxLabel.setAttribute("for", "max_" + id);
                targetLabel.textContent = "Target " + id;
                maxLabel.textContent = "Max " + id;

                colOne.appendChild(targetLabel);
                colOne.appendChild(sliders[0]);
                colOne.appendChild(sliders[1]);
                row.appendChild(colOne);

                colTwo.appendChild(maxLabel);
                colTwo.appendChild(sliders[2]);
                colTwo.appendChild(sliders[3]);
                row.appendChild(colTwo);

                container.appendChild(row);

                sliderContainer.appendChild(container);
            } else {
                checkedBtnCount--;
                let removedDiv = document.getElementById(e.target.id + "_container");
                sliderContainer.removeChild(removedDiv);
            }
        };

        checkBtns.forEach(function (btn) {
            btn.addEventListener("click", createSliders);
        });

        function updateSliderValue(value, name) {
            document.getElementById(name).innerHTML = value;
        }

        // Send data to next page
        let nextBtn = document.getElementById("next_btn_features");
        let checkedBtnCount = 0;

        function sendData() {
            if (checkedBtnCount > 0) {
                let access_token = '<%= access_token %>';
                let trackIds = '<%= trackIds %>';
                let queryString = "limit=40&seed_tracks=";

                trackIds += "&";
                queryString += trackIds;

                // Audio Feature values
                let featureDisplays = document.getElementsByClassName("feature-display");
                let featureData = new Object();
                for (var i = 0; i < featureDisplays.length; i++) {
                    let key = featureDisplays[i].id;
                    let value = parseFloat(featureDisplays[i].textContent);
                    featureData[key] = value;
                }

                const entries = Object.entries(featureData);
                for (const [key, value] of entries) {
                    queryString = queryString + key + "=" + value + "&";
                }
                queryString = queryString.slice(0, -1);

                // Desired Audio features
                let featuresList = "",
                    checkBoxes = document.getElementsByTagName("input");

                for (var i = 0; i < checkBoxes.length; i++) {
                    if (checkBoxes[i].type === "checkbox" && checkBoxes[i].checked === true) {
                        featuresList = featuresList + checkBoxes[i].id + ", ";
                    }
                }
                featuresList = featuresList.slice(0, -2);

                let url = "/recommendations/" + access_token + "/" + queryString + "/" + featuresList + "/" + trackIds;
                nextBtn.href = url;
            } else {
                let instructions = document.getElementById("checkbox_instructions"),
                    alert = document.createElement("h6");
                alert.textContent = "Please select at least 1 audio feature.";
                alert.setAttribute("class", "text-danger");

                instructions.appendChild(alert);
            }

        }

        nextBtn.addEventListener("click", sendData);

        // For Bootstrap tooltip
        $(document).ready(function () {
            $("body").tooltip({ selector: '[data-toggle=tooltip]' });
        });
    </script>
    <script src="/scripts/charts.js"></script>
    <script src="/scripts/features.js"></script>
</body>

</html>